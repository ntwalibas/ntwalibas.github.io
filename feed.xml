<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-17T12:46:05+01:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Introduction to the Variational Quantum Eigensolver</title><link href="http://localhost:4000/blog/2023/07/20/variational-quantum-eigensolver/" rel="alternate" type="text/html" title="Introduction to the Variational Quantum Eigensolver" /><published>2023-07-20T00:00:00+01:00</published><updated>2023-07-20T00:00:00+01:00</updated><id>http://localhost:4000/blog/2023/07/20/variational-quantum-eigensolver</id><content type="html" xml:base="http://localhost:4000/blog/2023/07/20/variational-quantum-eigensolver/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The variational quantum eigensolver (VQE) is a hybrid quantum-classical
algorithm that performs the hard computation on a quantum computer then
uses a classical computer to process the measurement results from
the quantum computer.&lt;/p&gt;

&lt;p&gt;The idea is quite simple: the premise of quantum computers is that the Hilbert
space is so huge that we can’t reasonably explore it efficiently on a classical
computer (under certain conditions - see
&lt;a href=&quot;https://en.wikipedia.org/wiki/Clifford_gates&quot;&gt;clifford circuits&lt;/a&gt;) so we use
a quantum computer to do the exploration.&lt;br /&gt;
But once we have the result from the quantum computer, we use a classical
optimizer to drive us towards the solution, which in our case
is the ground state of the system we are studying.&lt;/p&gt;

&lt;p&gt;The sections that follow are all about making sense of the two paragraphs above
and seeing VQE in action.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;It is assumed that the reader has some basic knowledge of quantum computation.
That is the reader knows what a circuit is, and what gates and qubits are.
In the tooling section, &lt;a href=&quot;#theoretical-tools&quot;&gt;theoretical tools&lt;/a&gt; subsection
we list the necessary theoretical tools needed to make fruitful use of this
tutorial.&lt;/p&gt;

&lt;p&gt;This tutorial is very much practical oriented. I do not try
to help build any intuition about VQE. The reader is encouraged
to read Michał Stęchły’s &lt;a href=&quot;https://www.mustythoughts.com/variational-quantum-eigensolver-explained&quot;&gt;blog post on VQE&lt;/a&gt;
for a more intuitive explanation.&lt;/p&gt;

&lt;h3 id=&quot;notation&quot;&gt;Notation&lt;/h3&gt;
&lt;p&gt;We will work mostly with Pauli matrices.
(The identity matrix is not a Pauli matrix but we need to list it here.)
We will adopt the following notation for those matrices.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identity $I$ matrix:&lt;/li&gt;
&lt;/ul&gt;

\[\sigma^{(i)} = I =
\begin{bmatrix}
1 &amp;amp; 0 \\
0 &amp;amp; 1
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Pauli $X$ matrix:&lt;/li&gt;
&lt;/ul&gt;

\[\sigma^{(x)} = X =
\begin{bmatrix}
0 &amp;amp; 1 \\
1 &amp;amp; 0
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Pauli $Y$ matrix:&lt;/li&gt;
&lt;/ul&gt;

\[\sigma^{(y)} = Y =
\begin{bmatrix}
0 &amp;amp; -i \\
i &amp;amp; 0
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Pauli $Z$ matrix:&lt;/li&gt;
&lt;/ul&gt;

\[\sigma^{(z)} = Z =
\begin{bmatrix}
1 &amp;amp; 0 \\
0 &amp;amp; -1
\end{bmatrix}\]

&lt;div class=&quot;figure figure-alert figure-danger&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Different roles of Pauli matrices
    &lt;/div&gt;
    It is important to remain cognizant of the fact that Pauli
    matrices can either be gates or observables.
    And the way they are handled in code depends on whether one
    is dealing with a gate or an observable.&lt;br /&gt;
    For instance, as a gate the Pauli matrix $\sigma^{(x)}$ will appear
    exactly as it is in both code and equations.
    But as an observable, it will appear as the matrix above
    in equations but will be translated to a Hadamard gate in code.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In addition to Pauli matrices, we will make use of the following
quantum gates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hadamard gate:&lt;/li&gt;
&lt;/ul&gt;

\[H =
\dfrac{1}{\sqrt{2}}\begin{bmatrix}
1 &amp;amp; 1 \\
1 &amp;amp; -1
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Phase gate:&lt;/li&gt;
&lt;/ul&gt;

\[S =
\begin{bmatrix}
1 &amp;amp; 0 \\
0 &amp;amp; i
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Phase shift gate:&lt;/li&gt;
&lt;/ul&gt;

\[P(\phi) =
\begin{bmatrix}
1 &amp;amp; 0 \\
0 &amp;amp; {\rm e}^{i\phi}
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Rotation about x-axis:&lt;/li&gt;
&lt;/ul&gt;

\[RX(\theta) =
\begin{bmatrix}
\cos\frac{\theta}{2} &amp;amp; -i\sin\frac{\theta}{2} \\
-i\sin\frac{\theta}{2} &amp;amp; \cos\frac{\theta}{2}
\end{bmatrix}\]

&lt;ul&gt;
  &lt;li&gt;Rotation about y-axis:&lt;/li&gt;
&lt;/ul&gt;

\[RY(\theta) =
\begin{bmatrix}
\cos\frac{\theta}{2} &amp;amp; -\sin\frac{\theta}{2} \\
\sin\frac{\theta}{2} &amp;amp; \cos\frac{\theta}{2}
\end{bmatrix}\]

&lt;h3 id=&quot;organization-of-the-tutorial&quot;&gt;Organization of the tutorial&lt;/h3&gt;
&lt;p&gt;In the next section we introduce the tools (theoretical and practical)
needed to understand and implement VQE.&lt;/p&gt;

&lt;p&gt;In the basic theory section, we justify why VQE works and how it works.
We will provide the physical justification of the algorithm and
explore two simple examples from which we can build up more complicated
examples.&lt;/p&gt;

&lt;p&gt;In the ansatz design section we learn about the different ways ansätze
are designed. We will explore some of the challenges that occur with
particular choices of different designs.&lt;/p&gt;

&lt;p&gt;In the optimizer selection section we talk about the different optimizers
that are available so the reader can play with them.&lt;/p&gt;

&lt;p&gt;In the measurement reduction section we show that it is possible
to reduce the number of measurements so we can obtain results faster.&lt;/p&gt;

&lt;p&gt;And last in the practical considerations section we think about the limitations
of VQE.&lt;/p&gt;

&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;/h2&gt;
&lt;h3 id=&quot;theoretical-tools&quot;&gt;Theoretical tools&lt;/h3&gt;
&lt;p&gt;The reader is expected to know the following mathematics:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finding the eigenvalues and eigenvectors of a matrix.&lt;/li&gt;
  &lt;li&gt;Basic operations on matrices.&lt;/li&gt;
  &lt;li&gt;Kronecker product, especially using the mixed-product property.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reader is also expected to know the following basic quantum computation theory:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Quantum states as rays in Hilbert space.&lt;/li&gt;
  &lt;li&gt;Quantum gates as evolution operators of quantum states.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A review of the measurement postulate will be provided
so it is not a prerequisite.&lt;/p&gt;

&lt;p&gt;The book &lt;em&gt;Quantum Computation and Quantum Information&lt;/em&gt;
&lt;a class=&quot;citation&quot; href=&quot;#nielsen_chuang_2010&quot;&gt;(Nielsen &amp;amp; Chuang, 2010)&lt;/a&gt; has the necessary background
that is required for much of this post.&lt;/p&gt;

&lt;h3 id=&quot;software-tools&quot;&gt;Software tools&lt;/h3&gt;
&lt;p&gt;We will use PennyLane from Xanadu to run code we write.
It is an easy to use library and has an excellent documentation
which includes demos, tutorials and reference documentation.&lt;/p&gt;

&lt;p&gt;The installation instructions can be found at
&lt;a href=&quot;https://pennylane.ai/install/&quot;&gt;https://pennylane.ai/install/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: we will use the noiseless state vector simulator so as not worry&lt;/em&gt;
&lt;em&gt;our heads with the complications that come with having a noisy device.&lt;/em&gt;
&lt;em&gt;Maybe a future post will explore the behavior of VQE when noise&lt;/em&gt;
&lt;em&gt;is taken into account.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-theory&quot;&gt;Basic theory&lt;/h2&gt;
&lt;p&gt;In physics, if we know the Hamiltonian of a system
then we know the dynamics of the system.
This can be easily seen by looking at Schrödinger’s equation.
Therefore, we will first need to have our problem encoded in
a Hamiltonian.&lt;/p&gt;

&lt;p&gt;We won’t spend our time trying to devise Hamiltonians —
this is very hard work — but we will assume that they are given to us.
Our goal will simply be finding the ground state energy (zero-point energy)
of the given Hamiltonian.&lt;/p&gt;

&lt;p&gt;We care about the ground state energy because it corresponds
to the energy of any system close to absolute zero.
It is true that sometimes we care about excited states of
a system but in this tutorial we won’t worry about that.&lt;/p&gt;

&lt;p&gt;We begin by justifying why VQE works. Then we see why a classical
optimizer is necessary to find the ground state energy.
Having grounded ourselves – pun intended – we tie all the different parts
required to make VQE work in some sort of template.
Last, we code a couple of examples to see if simulations match theoretical
predictions.&lt;/p&gt;

&lt;h3 id=&quot;the-measurement-postulate&quot;&gt;The measurement postulate&lt;/h3&gt;
&lt;p&gt;Let $H$, the Hamiltonian, be the observable representing the total energy of the
system. By the spectral theorem $H$ has spectral decomposition:&lt;/p&gt;

\[H = \sum_{i} \lambda_i P_i \tag{1}\]

&lt;p&gt;Where $\lambda_i$ is an eigenvalue and $P_i$ is a projector
onto the eigenspace of $H$ with corresponding eigenvalue $\lambda_i$.
That simply means that $P_{i}^{2} = P_i$
and $P_i = \ket{\lambda_i} \bra{\lambda_i}$
where $\{ \ket{\lambda_i} \}$ is the eigenspace of $H$
with each eigenvector $\ket{\lambda_i}$ associated to eigenvalue $\lambda_i$.&lt;/p&gt;

&lt;p&gt;We can therefore write equation $(\href{#mjx-eqn:1}{1})$ as:&lt;/p&gt;

\[H = \sum_{i} \lambda_i \ket{\lambda_i} \bra{\lambda_i} \tag{1&apos;}\]

&lt;p&gt;Upon measurement (&lt;em&gt;before&lt;/em&gt; the measurement but not after)
the &lt;strong&gt;probability&lt;/strong&gt; of measuring the eigenvalue $\lambda_i$
given some state $\ket{\psi}$ is given by:&lt;/p&gt;

\[p(\lambda_i) = \bra{\psi} P_i \ket{\psi}
= \braket{\psi\\|\lambda_i} \braket{\lambda_i\\|\psi}
= \braket{\psi\\|\lambda_i} \braket{\psi\\|\lambda_i}^*
= \lvert\braket{\psi\\|\lambda_i}\rvert^{2} \tag{2}\]

&lt;p&gt;The final state &lt;em&gt;after&lt;/em&gt; measurement is given by:&lt;/p&gt;

\[\ket{\psi} \mapsto \frac{P_i \ket{\psi}}{\sqrt{p(\lambda_i)}}\]

&lt;p&gt;We will care only about post-measurement states for the purpose of calculating
probabilities but not much else beside that.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert figure-success&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Measuring observables and eigenvalues
    &lt;/div&gt;
    It is important to realize that when we are asked to measure an observable,
    we are being asked to find the probabilities of measuring its eigenvalues
    given some state.&lt;br /&gt;
    In practice though we will see the eigenvectors appearing with a certain
    frequency. So we will calculate the probability from those frequencies.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;figure figure-alert figure-info&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Different terminology for measurements
    &lt;/div&gt;
    It is common to hear/read that a measurement was performed
    in a certain basis.&lt;br /&gt;
    Let us recall that the eigenvectors of a Hermitian operator
    form a &lt;i&gt;complete&lt;/i&gt; basis. This means that we can express
    any state in the corresponding space as a linear combination
    of the eigenvectors of that Hermitian operator.&lt;br /&gt;
    For example the $\sigma^{(z)}$ observable, being a Hermitian operator,
    has eigenvectors $\ket{0} = \begin{bmatrix}1\\0\end{bmatrix}$ and
    $\ket{1} = \begin{bmatrix}0\\1\end{bmatrix}$.&lt;br /&gt;
    Consequently every one qubit state can be written as
    $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$.
    States written using the eigenvectors of $\sigma^{(z)}$ are said to be
    written in the &lt;i&gt;standard basis&lt;/i&gt; or simply in the $\sigma^{(z)}$ basis.&lt;br /&gt;
    (It is called standard basis because it maps to classical binary,
    which is the standard for classical computing.)&lt;br /&gt;&lt;br /&gt;
    Similarly the $\sigma^{(x)}$ observable has eigenvectors
    $\ket{+} = \dfrac{1}{\sqrt{2}}\begin{bmatrix}1\\1\end{bmatrix}$ and
    $\ket{-} = \dfrac{1}{\sqrt{2}}\begin{bmatrix}1\\-1\end{bmatrix}$.&lt;br /&gt;
    Therefore every one qubit state can also be written as
    $\ket{\psi} = c_0 \ket{+} + c_1 \ket{-}$.
    States written using the eigenvectors of $\sigma^{(x)}$ are said to be
    written in the &lt;i&gt;Hadamard basis&lt;/i&gt; or the simply in the $\sigma^{(x)}$ basis.&lt;br /&gt;
    (It is called the Hadamard basis because the eigenvectors of $\sigma^{(x)}$ are
    obtained by applying the Hadamard gate to eigenvectors of $\sigma^{(z)}$.)&lt;br /&gt;&lt;br /&gt;
    &lt;b&gt;However, we will find it convenient most of the time to work
    in the standard basis.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    So performing a measurement in the standard basis is equivalent
    to using projectors $P_0=\ket{0}\bra{0}$ and $P_1=\ket{1}\bra{1}$.&lt;br /&gt;
    Equivalently, performing a measurement in the Hadamard basis is equivalent
    to using the projectors $P_+=\ket{+}\bra{+}$ and $P_-=\ket{-}\bra{-}$
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;pauli-matrices-and-the-identity-form-a-complete-basis&quot;&gt;Pauli matrices and the identity form a complete basis&lt;/h4&gt;
&lt;p&gt;The Pauli matrices with the identity matrix
form a complete basis for all observables on a single qubit.
The tensor products of Pauli matrices along with the identity
matrix form a complete basis for observables on multiple
qubits.&lt;/p&gt;

&lt;p&gt;What that means is that every observables we can think
about can be expressed as a linear combination of Pauli
matrices and the identity matrix.&lt;br /&gt;
&lt;strong&gt;Therefore we only need to learn how to measure Pauli matrices.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;measurement-of-sigmaz-with-respect-to-ketpsi--c_0-ket0--c_1-ket1&quot;&gt;Measurement of $\sigma^{(z)}$ with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/h4&gt;
&lt;p&gt;The eigenvalues and eigenvectors of $\sigma^{(z)}$ are calculated
in the &lt;a href=&quot;#eigenvalues-and-eigenvectors-of-sigmaz&quot;&gt;derivations section&lt;/a&gt; and are found to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $+1$ with eigenvector $\ket{0} = \begin{bmatrix} 1 \\ 0\end{bmatrix}$&lt;/li&gt;
  &lt;li&gt;Eigenvalue $-1$ with eigenvector $\ket{1} = \begin{bmatrix} 0 \\ 1\end{bmatrix}$&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Measurement with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/strong&gt;&lt;br /&gt;
We calculate only the probability of obtaining eigenvalue $+1$ given the state
$\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$. The calculation for eigenvalue
$-1$ is similar and left as an exercise.&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \lvert\braket{\psi\\|0}\rvert^{2} \\
    &amp;amp;= \lvert (c_0 \ket{0} + c_1 \ket{1})\ket{0}\rvert^{2} \\
    &amp;amp;= \lvert c_0 \braket{0\\|0} + c_1 \braket{1\\|0} \rvert^{2} \\
    &amp;amp;= \lvert c_0 \rvert^{2} \\
\end{align}\]

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quantum circuit for performing the measurement&lt;/strong&gt;&lt;br /&gt;
The measurement of $+1$ corresponds to the use of the projector
$P_+ = \ket{0}\bra{0}$. Therefore we have:&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \bra{\psi}P_+\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|0}\braket{0\\|\psi} \\
    &amp;amp;= \braket{\psi\\|I\\|0}\braket{0\\|I\\|\psi} \\
    &amp;amp;= \lvert \braket{0\\|I\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;Concomitantly, the measurement of $-1$ corresponds to the use of the projector
$P_- = \ket{1}\bra{1}$ leading to:&lt;/p&gt;

\[\begin{align}
    p(-1) &amp;amp;= \bra{\psi}P_-\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|1}\braket{1\\|\psi} \\
    &amp;amp;= \braket{\psi\\|I\\|1}\braket{1\\|I\\|\psi} \\
    &amp;amp;= \lvert \braket{1\\|I\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;We conclude then that the circuit to perform a measurement
of the $\sigma^{(z)}$ observable given a state $\psi$ is as follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/z-measurement.png&quot; style=&quot;width: 20%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of the $\sigma^{(z)}$ observable:&lt;/span&gt;
        since the identity $I$ action on the state $\ket{\psi}$ is a no-op we need not do
        anything, we just measure directly.
    &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code for performing the measurement&lt;/strong&gt;&lt;br /&gt;
We prepare the state $\ket{\psi} = RY(^\pi/_2)\ket{0}$ and measure
the $\sigma^{(z)}$ observable with respect to that state.
$RY$ is a rotation about the y-axis.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state against which to measure
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Get the frequencies for each eigenvalue of the Z observable
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurent of the $\sigma^{(z)}$ observable:&lt;/span&gt;
    we prepare the state $\ket{\psi} = RY(^\pi/_2)\ket{0}$
    as a generic example, any state would do.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that if we prepared eigenvectors of $\sigma^{(z)}$
we will obtain eigenvalues with $100\%$ probability.
That is if we prepare the $\ket{0}$ state, we will obtain
eigenvalue $+1$ with $100\%$ probability.&lt;br /&gt;
Equivalently, if we prepare $\ket{1}$, we will obtain
eigenvalue $-1$ with $100\%$ probability.&lt;/p&gt;

&lt;h4 id=&quot;measurement-of-sigmay-with-respect-to-ketpsi--c_0-ket0--c_1-ket1&quot;&gt;Measurement of $\sigma^{(y)}$ with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/h4&gt;
&lt;p&gt;The eigenvalues and eigenvectors of $\sigma^{(y)}$ are calculated
in the &lt;a href=&quot;#eigenvalues-and-eigenvectors-of-sigmay&quot;&gt;derivations section&lt;/a&gt; and are found to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $+1$ with eigenvector $\ket{+i} = \dfrac{1}{\sqrt{2}}(\ket{0} + i\ket{1})$&lt;/li&gt;
  &lt;li&gt;Eigenvalue $-1$ with eigenvector $\ket{-i} = \dfrac{1}{\sqrt{2}}(\ket{0} - i\ket{1})$&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Measurement with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/strong&gt;&lt;br /&gt;
We calculate only the probability of obtaining eigenvalue $+1$ given the state
$\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$. The calculation for eigenvalue
$-1$ is similar and left as an exercise.&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \lvert\braket{\psi\\|+i}\rvert^{2} \\
    &amp;amp;= \lvert (c_0 \ket{0} + c_1 \ket{1})\ket{+i}\rvert^{2} \\
    &amp;amp;= \lvert c_0 \braket{0\\|+i} + c_1 \braket{1\\|+i} \rvert^{2} \\
    &amp;amp;= \left\lvert c_0 \left(\bra{0} \left(\dfrac{1}{\sqrt{2}} (\ket{0} + i\ket{1})\right)\right)
    + c_1 \left(\bra{1} \left(\dfrac{1}{\sqrt{2}} (\ket{0} + i\ket{1})\right)\right) \right\rvert^{2} \\
    &amp;amp;= \left\lvert \dfrac{c_0}{\sqrt{2}}\left( \braket{0\\|0} \right)
    + \dfrac{ic_1}{\sqrt{2}}\left( \braket{1\\|1} \right) \right\rvert^{2} \\
    &amp;amp;= \left\lvert \dfrac{c_0}{\sqrt{2}} + \dfrac{ic_1}{\sqrt{2}} \right\rvert^{2} \\
    &amp;amp;= \dfrac{1}{2} \lvert c_0 + ic_1 \rvert^{2} \\
    &amp;amp;= \dfrac{1}{2} \left(\sqrt{c_{0}^{2} + c_{1}^{2}}\right)^{2} \\
    &amp;amp;= \dfrac{c_{0}^{2} + c_{1}^{2}}{2}
\end{align}\]

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quantum circuit for performing the measurement&lt;/strong&gt;&lt;br /&gt;
The measurement of $+1$ corresponds to the use of the projector
$P_+ = \ket{+i}\bra{+i}$. Therefore we have:&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \bra{\psi}P_+\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|+i}\braket{+i\\|\psi} \\
    &amp;amp;= \braket{\psi\\|SH\\|0}\braket{0\\|HS^\dagger\\|\psi} \\
    &amp;amp;= \lvert \braket{0\\|HS^\dagger\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;Similarly, the measurement of $-1$ corresponds to the use of the projector
$P_- = \ket{-i}\bra{-i}$ leading to:&lt;/p&gt;

\[\begin{align}
    p(-1) &amp;amp;= \bra{\psi}P_-\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|-i}\braket{-i\\|\psi} \\
    &amp;amp;= \braket{\psi\\|SH\\|1}\braket{1\\|HS^\dagger\\|\psi} \\
    &amp;amp;= \lvert \braket{1\\|HS^\dagger\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;We conclude then that the circuit to perform a measurement
of the $\sigma^{(y)}$ observable given a state $\psi$ is as follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/y-measurement.png&quot; style=&quot;width: 30%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of the $\sigma^{(y)}$ observable:&lt;/span&gt;
        we need to perform a basis change from the $\sigma^{(z)}$ basis to the $\sigma^{(y)}$
        basis using $HS^\dagger$ then perform a standard measurement in the
        $\sigma^{(z)}$ basis. We will get eigenvectors in the $\sigma^{(z)}$ basis
        but the probabilities will correspond to measurements of the
        eigenvalues of $\sigma^{(y)}$.
    &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code for performing the measurement&lt;/strong&gt;&lt;br /&gt;
We prepare the state $\ket{\psi} = H\ket{0}$ and measure
the $\sigma^{(y)}$ observable with respect to that state.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Measurement of the Y observable
    using facilities provided by PennyLane.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Perform the measurement
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Custom circuit to measure the Y observable.
    We need to perform a change of basis then
    do a measurement in the standard basis
    as by the circuit above.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Perform a change of basis
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adjoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Measure in standard basis
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurement of the $\sigma^{(y)}$ observable:&lt;/span&gt;
    we prepare the state $\ket{\psi} = H\ket{0}$. We note that we obtain
    eigenvalue $+1$ with appromixately $0.5$ probablity and same
    for eigenvalue $-1$. It is easy to verify that this corresponds
    to theoretical predictions.&lt;br /&gt;
    Also, note that &lt;code&gt;measure()&lt;/code&gt; and &lt;code&gt;custom_measure()&lt;/code&gt;
    provide the same results. In the first case, we use facilities provided by PennyLane.
    In the second case, we use the formula derived.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that if we prepared eigenvectors of $\sigma^{(y)}$
we will obtain eigenvalues with $100\%$ probability.
That is if we prepare the $\ket{+i} = SH\ket{0}$ state,
we will obtain eigenvalue $+1$ with $100\%$ probability.&lt;br /&gt;
Equivalently, if we prepare $\ket{-i} = SH\ket{1}$,
we will obtain eigenvalue $-1$ with $100\%$ probability.&lt;/p&gt;

&lt;h4 id=&quot;measurement-of-sigmax-with-respect-to-ketpsi--c_0-ket0--c_1-ket1&quot;&gt;Measurement of $\sigma^{(x)}$ with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/h4&gt;
&lt;p&gt;The eigenvalues and eigenvectors of $\sigma^{(x)}$ are calculated
in the &lt;a href=&quot;#eigenvalues-and-eigenvectors-of-sigmax&quot;&gt;derivations section&lt;/a&gt; and are found to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $+1$ with eigenvector $\ket{+} = \dfrac{1}{\sqrt{2}}(\ket{0} + \ket{1})$&lt;/li&gt;
  &lt;li&gt;Eigenvalue $-1$ with eigenvector $\ket{-} = \dfrac{1}{\sqrt{2}}(\ket{0} - \ket{1})$&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Measurement with respect to $\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$&lt;/strong&gt;&lt;br /&gt;
We calculate only the probability of obtaining eigenvalue $+1$ given the state
$\ket{\psi} = c_0 \ket{0} + c_1 \ket{1}$. The calculation for eigenvalue
$-1$ is similar and left as an exercise.&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \lvert\braket{\psi\\|+}\rvert^{2} \\
    &amp;amp;= \lvert (c_0 \ket{0} + c_1 \ket{1})\ket{+}\rvert^{2} \\
    &amp;amp;= \lvert c_0 \braket{0\\|+} + c_1 \braket{1\\|+} \rvert^{2} \\
    &amp;amp;= \left\lvert c_0 \left(\bra{0} \left(\dfrac{1}{\sqrt{2}} (\ket{0} + \ket{1})\right)\right)
    + c_1 \left(\bra{1} \left(\dfrac{1}{\sqrt{2}} (\ket{0} + \ket{1})\right)\right) \right\rvert^{2} \\
    &amp;amp;= \left\lvert \dfrac{c_0}{\sqrt{2}}\left( \braket{0\\|0} \right)
    + \dfrac{c_1}{\sqrt{2}}\left( \braket{1\\|1} \right) \right\rvert^{2} \\
    &amp;amp;= \left\lvert \dfrac{c_0}{\sqrt{2}} + \dfrac{c_1}{\sqrt{2}} \right\rvert^{2} \\
    &amp;amp;= \dfrac{1}{2} \lvert c_0 + c_1 \rvert^{2} \\
    &amp;amp;= \dfrac{1}{2} \left(\sqrt{c_{0}^{2} + c_{1}^{2}}\right)^{2} \\
    &amp;amp;= \dfrac{c_{0}^{2} + c_{1}^{2}}{2}
\end{align}\]

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quantum circuit for performing the measurement&lt;/strong&gt;&lt;br /&gt;
The measurement of $+1$ corresponds to the use of the projector
$P_+ = \ket{+}\bra{+}$. Therefore we have:&lt;/li&gt;
&lt;/ul&gt;

\[\begin{align}
    p(+1) &amp;amp;= \bra{\psi}P_+\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|+}\braket{+\\|\psi} \\
    &amp;amp;= \braket{\psi\\|H\\|0}\braket{0\\|H\\|\psi} \\
    &amp;amp;= \lvert \braket{0\\|H\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;Similarly, the measurement of $-1$ corresponds to the use of the projector
$P_- = \ket{-}\bra{-}$ leading to:&lt;/p&gt;

\[\begin{align}
    p(-1) &amp;amp;= \bra{\psi}P_-\ket{\psi} \\
    &amp;amp;= \braket{\psi\\|-}\braket{-\\|\psi} \\
    &amp;amp;= \braket{\psi\\|H\\|1}\braket{1\\|H\\|\psi} \\
    &amp;amp;= \lvert \braket{1\\|H\\|\psi} \rvert^{2} \\
\end{align}\]

&lt;p&gt;We conclude then that the circuit to perform a measurement
of the $\sigma^{(x)}$ observable given a state $\psi$ is as follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/x-measurement.png&quot; style=&quot;width: 30%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of the $\sigma^{(x)}$ observable:&lt;/span&gt;
        we need to perform a basis change from the $\sigma^{(z)}$ basis to the $\sigma^{(x)}$
        basis using $H$ then perform a standard measurement in the
        $\sigma^{(z)}$ basis. We will get eigenvectors in the $\sigma^{(z)}$ basis
        but the probabilities will correspond to measurements of the
        eigenvalues of $\sigma^{(x)}$.
    &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code for performing the measurement&lt;/strong&gt;&lt;br /&gt;
We prepare the state $\ket{\psi} = X\ket{0}$ and measure
the $\sigma^{(x)}$ observable with respect to that state.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Measurement of the Y observable
    using facilities provided by PennyLane.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Perform the measurement
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Custom circuit to measure the X observable.
    We need to perform a change of basis then
    do a measurement in the standard basis
    as by the circuit above.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Perform a change of basis
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Measure in standard basis
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurement of the $\sigma^{(x)}$ observable:&lt;/span&gt;
    we prepare the state $\ket{\psi} = X\ket{0}$. We note that we obtain
    eigenvalue $+1$ with appromixately $0.5$ probablity and same
    for eigenvalue $-1$. It is easy to verify that this corresponds
    to theoretical predictions.&lt;br /&gt;
    Also, note that &lt;code&gt;measure()&lt;/code&gt; and &lt;code&gt;custom_measure()&lt;/code&gt;
    provide the same results. In the first case, we use facilities provided by
    PennyLane. In the second case, we use the derived circuit.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that if we prepared the eigenvectors of $\sigma^{(x)}$
we will obtain eigenvalues with $100\%$ probability.
That is if we prepare the $\ket{+} = H\ket{0}$ state,
we will obtain eigenvalue $+1$ with $100\%$ probability.&lt;br /&gt;
Equivalently, if we prepare $\ket{-} = H\ket{1}$,
we will obtain eigenvalue $-1$ with $100\%$ probability.&lt;/p&gt;

&lt;h4 id=&quot;multi-qubits-measurement&quot;&gt;Multi-qubits measurement&lt;/h4&gt;
&lt;p&gt;In order to perform measurements on multiple qubits,
we only need to perform a change of basis on each qubit
individually as dictated by the form of the Hamiltonian.&lt;/p&gt;

&lt;p&gt;Let us justify this: we will only consider the case of two qubits
though the procedure can be proven for an arbitrary number of qubits.&lt;/p&gt;

&lt;p&gt;Consider a generic 2-qubits Hamiltonian of the form $H = \sigma^{(m)} \otimes \sigma^{(n)}$,
where $n, m \in \{i, x, y, z\}$.
We would like to know how to find the probabilities corresponding
to the eigenvalues of $H$.&lt;/p&gt;

&lt;p&gt;First, we find the projectors:&lt;/p&gt;

\[\begin{align}
    H &amp;amp;= \sum_i \lambda^{(m)}_i P^{(m)}_i \otimes \sum_j \lambda^{(n)}_j P^{(n)}_j \\
    &amp;amp;= \sum_{i,j} \lambda^{(m)}_i \cdot \lambda^{(n)}_j \left(P^{(m)}_i \otimes P^{(n)}_j\right) \\
    &amp;amp;= \sum_r \lambda_r P_r
\end{align}\]

&lt;p&gt;Where we set $\lambda_r = \lambda^{(m)}_i \cdot \lambda^{(n)}_j$
and $P_r = P^{(m)}_i \otimes P^{(n)}_j$.&lt;/p&gt;

&lt;!-- In general, if $H = \bigotimes_{k} \sigma_{k}^{(l)}$ with $l \in \\{i, x, y, z\\}$
then we have:


$$
H = \sum_{r=0}^{2^k-1} \left(\prod_{k} \lambda_r^{(k)} \bigotimes_{k} P^{(k)}_r\right)
$$


From the equation above, we conclude that the projectors of $H$
are $\bigotimes_{k} P^{(k)}_r$. --&gt;

&lt;p&gt;Then, we find the probability of measuring an arbitrary eigenvalue $\lambda_r$.
Again, we only make the derivation for the 2-qubits case and make a general
statement for the multiple-qubits case:&lt;/p&gt;

\[\begin{align}
    p(\lambda_r) &amp;amp;= \bra{\psi} P_r \ket{\psi} \\
    &amp;amp;= \bra{\psi} (P_i^{(m)} \otimes P_j^{(n)}) \ket{\psi} \\
    &amp;amp;= \bra{\psi} \left(\ket{m}\bra{m} \otimes \ket{n}\bra{n}\right) \ket{\psi} &amp;amp;P^{(\star)} = \ket{\star}\bra{\star} \\
    &amp;amp;= \bra{\psi} \left((\overbrace{G_m\ket{0}}^{A}\overbrace{\bra{0}G_m^\dagger}^{B}) \otimes
    (\overbrace{G_n\ket{0}}^{C}\overbrace{\bra{0}G_n^\dagger}^{D}) \right) \ket{\psi} &amp;amp;\ket{\star}=G_\star\ket{0} \\
    &amp;amp;= \bra{\psi} \left( (\overbrace{G_m}^{A&apos;}\overbrace{\ket{0}}^{B&apos;} \otimes \overbrace{G_n}^{C&apos;}\overbrace{\ket{0}}^{D&apos;})
    (\overbrace{\bra{0}}^{A&apos;}\overbrace{G_m^\dagger}^{B&apos;} \otimes \overbrace{\bra{0}}^{C&apos;}\overbrace{G_n^\dagger}^{D&apos;}) \right) \ket{\psi}
    &amp;amp;(AB)\otimes(CD)=(A\otimes C)(B\otimes D) \\
    &amp;amp;= \Big( \bra{\psi} (G_m \otimes G_n) (\ket{0} \otimes \ket{0})\Big)\Big((\bra{0} \otimes \bra{0}) (G_m^\dagger \otimes G_n^\dagger) \ket{\psi} \Big)
    &amp;amp;(A&apos;B&apos;)\otimes(C&apos;D&apos;)=(A&apos;\otimes C&apos;)(B&apos;\otimes D&apos;) \\
    &amp;amp;= \lvert \bra{00} G_m^\dagger \otimes G_n^\dagger \ket{\psi} \rvert^2
\end{align}\]

&lt;p&gt;The choice $\ket{\star} = G_\star \ket{0}$ is arbitrary.
It could have been $\ket{\star}=G_\star\ket{1}$ and the result would
still be similar.&lt;/p&gt;

&lt;p&gt;The main point is that given a 2-qubits state $\ket{\psi}$
we just need to apply the gate $G_m^\dagger$ to the first qubit
and the gate $G_n^\dagger$ to the second
qubit then measure in the standard basis.
If we had 3 qubits with $\sigma^{(o)}$ as the third observable acting
on the third qubit, then we would apply gate $G_o^\dagger$ to
the third qubit. And so on.&lt;/p&gt;

&lt;!-- In general, given a multi-qubits Hamiltonian with spectral decomposition
$H = \sum_{r=0}^{2^k-1} \left(\prod_{k} \lambda_r^{(k)} \bigotimes_{k} P^{(k)}_r\right)$
where $P^{(k)} = G_k\ket{0_k}\bra{0_k}G_k^\dagger$, the probability of measuring
eigenvalue $\lambda_r = \prod_k \lambda_r^{(k)}$ is given by:


$$
p(\lambda_r) = \Bigg\lvert \bra{\star}^{\otimes k} \Big(\bigotimes_k G_k^{\dagger}\Big) \ket{\psi} \Bigg\rvert^2
$$


Where $\bra{\star} = \bra{0}$ or $\bra{\star} = \bra{1}$.

We therefore conclude that the circuit to perform a measurement
of the $H = \bigotimes_{k} \sigma_{k}^{(l)}$ observable
given a state $\ket{\psi}$ is given by the circuit that follows: --&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/generalized-measurements.png&quot; style=&quot;width: 30%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of the
        $H= \sigma^{(m)} \otimes \sigma^{(n)} \otimes \sigma^{(o)}$ observable:&lt;/span&gt;
        we apply the corresponding changing of basis gates to each
        qubit indexed by the observable.
    &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Example 1: measurement of $H = \sigma^{(x)} \otimes \sigma^{(z)}$&lt;/strong&gt;&lt;br /&gt;
As a first example, we will measure $H = \sigma^{(x)} \otimes \sigma^{(z)}$
with respect to one of its ground states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s start by finding the eigenvalues and eigenvectors of $H$.
As the number of qubits increases, it gets difficult to do the calculations
manually. That’s why we will use Numpy to do the calculation for us.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy.linalg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;la&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;eigvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigvecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;la&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigvecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Eigenvalues and eigenvectors of $H = \sigma^{(x)} \otimes \sigma^{(z)}$:
    &lt;/span&gt;
    we find that $H$ has a degenerate ground state energy,
    that is there are two states with the same ground state energy $-1$.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We therefore see that $H$ has the following eigenvalues and eigenvectors:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $-1$ has eigenvectors:
    &lt;ul&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; -1 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Eigenvalue $+1$ has eigenvectors:
    &lt;ul&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, should we prepare the state
$\ket{\psi} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; -1 &amp;amp; 0\end{bmatrix}^\intercal = \dfrac{1}{\sqrt{2}}(\ket{00}-\ket{10})$,
we should expect to measure eigenvalue $-1$ with probability $1$.
The circuit that prepares that state and performs the measurement
of $H$ against that state follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/xz-groundstate.png&quot; style=&quot;width: 45%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of $H = \sigma^{(x)} \otimes \sigma^{(z)}$
        against the state $\ket{\psi} = \dfrac{1}{\sqrt{2}}(\ket{00}-\ket{10})$:&lt;/span&gt;
        the gates before the zigzag lines correspond to the state preparation.
        The gates afterwards correspond to the change of basis before
        performing the measurement in the standard basis.&lt;br /&gt;
        &lt;i&gt;A simplification would result in cancellation of two $H$ gates
        acting on the first qubits. They are left for the purpose of
        clarity and completeness.&lt;/i&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The code that follows implements the circuit above.
The regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure()&lt;/code&gt; function shows the implementation
using PennyLane facilities.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_measure()&lt;/code&gt; does the implementation as per the
figure above.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Measurement of the XZ observable
    using facilities provided by PennyLane.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Perform the measurement
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# The @ operator calculates the tensor product
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Perform a change of basis
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Measure in standard basis
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurement of $H$:&lt;/span&gt;
    Both &lt;code&gt;measure()&lt;/code&gt; and &lt;code&gt;custom_measure()&lt;/code&gt;
    should yield eigenvalue $-1$ with probability $1$.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to find the circuits that prepare the remaining
    $3$ eigenvectors and verify that the corresponding eigenvalues
    are computed with the predicted probability of $100\%$.
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Example 2: measurement of $H = \sigma^{(z)} \otimes \sigma^{(i)}$&lt;/strong&gt;&lt;br /&gt;
For our second example, we will measure $H = \sigma^{(z)} \otimes \sigma^{(i)}$
with respect to one of its ground states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The eigenvalues and eigenvectors are calculated as before and are found to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $-1$ has eigenvectors:
    &lt;ul&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Eigenvalue $+1$ has eigenvectors:
    &lt;ul&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will prepare $\ket{\psi} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal = \dfrac{1}{\sqrt{2}} \ket{11}$
and measure $H$ against that state.&lt;/p&gt;

&lt;p&gt;The circuit that prepares $\ket{\psi}$ and measures $H$ against that
state is in the figure that follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/zi-groundstate.png&quot; style=&quot;width: 30%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Measurement of $H = \sigma^{(z)} \otimes \sigma^{(i)}$
        against the state $\ket{\psi} = \ket{11}$:&lt;/span&gt;
        we need only measure the first qubit. This is equivalent
        to measuring both qubits in the standard basis.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The code that follows implements the figure above.
Notice how we don’t tensor $\sigma^{(z)}$ with $\sigma^{(i)}$
in the code. We just perform a measurement on the first qubit.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Measurement of the ZI observable
    using facilities provided by PennyLane.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Prepare the state
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Perform the measurement
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurement of $H$:&lt;/span&gt;
    we only need to measure the first qubit when handed a Hamiltonian
    where there is a tensor with the identity.
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to find the circuits that prepare the remaining
    $3$ eigenvectors and verify that the corresponding eigenvalues
    are computed with the predicted probability of $100\%$.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;expectation-values&quot;&gt;Expectation values&lt;/h3&gt;
&lt;p&gt;From equation $(\href{#mjx-eqn:2}{2})$ we note that measurements in quantum mechanics are
inherently probabilistic in nature. That means we need to make multiple
measurements in order to make coherent conclusions.&lt;/p&gt;

&lt;p&gt;The fact that measurements are probablistic also means that we can
calculate quantities such as moments of the probability distribution we get.
Of particular interest we want to know the expectation value of the observale
of interest.&lt;br /&gt;
In more words, given a state $\ket{\psi}$ and an observable $H$,
we will generally want to know the expectation value ($i.e.$ average)
of the eigenvalues ($i.e.$ energies since we have a Hamiltonian)
with respect to that state.&lt;/p&gt;

&lt;p&gt;In other words, we can’t really measure in one measuremement the energy
of the system but we can only try to find the average.
If the state against which we are making measurements happens
to be an eigenvector of the Hamiltonian then after a sufficient
number of measurements we will approach the true eigenvalue
(that is the true energy of the system) with respect to that state.&lt;/p&gt;

&lt;p&gt;So how do we find the average energy of a Hamiltonian given a state?
From basic probability theory, the average is simply the sum of
the measured energies times the probability of obtaining that specific energy.&lt;/p&gt;

\[\begin{align}
    \mathbb{E}(H) &amp;amp; = \sum_{i} \lambda_i p(\lambda_i) \\
    &amp;amp; = \sum_{i} \lambda_i \bra{\psi} P_i \ket{\psi} \\
    &amp;amp; = \bra{\psi} \left( \sum_{i} \lambda_i P_i \right) \ket{\psi} \\
    &amp;amp; = \bra{\psi} H \ket{\psi}
\end{align}\]

&lt;p&gt;As a notational convenience, we will adopt:&lt;/p&gt;

\[\braket{H} = \mathbb{E}(H) = \bra{\psi} H \ket{\psi} \tag{3}\]

&lt;p&gt;Using equation $(1’)$ for the expansion in the Hamiltonian
eigenbasis, we obtain:&lt;/p&gt;

\[\begin{align}
    \braket{H} &amp;amp; = \bra{\psi} H \ket{\psi} \\
    &amp;amp; = \bra{\psi} \left( \sum_{i} \lambda_i \ket{\lambda_i}
    \bra{\lambda_i} \right) \ket{\psi} \\
    &amp;amp; = \sum_{i} \lambda_i \braket{\psi \\|\lambda_i}
    \braket{\lambda_i\\|\psi} \\
    &amp;amp; = \sum_{i} \lambda_i \braket{\psi\\|\lambda_i}
    \braket{\psi\\|\lambda_i}^* \\
    &amp;amp; = \sum_{i} \lambda_i \lvert\braket{\psi\\|\lambda_i}\rvert^{2}
\end{align}\]

&lt;p&gt;Therefore if we are given a state $\ket{\psi}$ and the eigendecomposition
of $H$, we can find the expectation value using:&lt;/p&gt;

\[\braket{H} = \sum_{i} \lambda_i \lvert\braket{\psi\\|\lambda_i}\rvert^{2}
= \sum_{i} \lambda_i p(\lambda_i) \tag{3&apos;}\]

&lt;p&gt;If the observable is of the form $H = \sum_i h_i H_i$ then the expectation value of $H$
is easily verified to be given by:&lt;/p&gt;

\[\braket{H} = \sum_i h_i \braket{H_i} \tag{4}\]

&lt;h4 id=&quot;example-1-expectation-value-of-h--sigmax&quot;&gt;Example 1: expectation value of $H = \sigma^{(x)}$&lt;/h4&gt;
&lt;p&gt;We quickly confirm that if we prepare the ground state
of $\sigma^{(x)}$, the expectation value will correspond
to the ground state energy of $\sigma^{(x)}$ since
we will obtain the ground state energy $-1$ with probability $1$&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# should print -1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;Measurement of $H = \sigma^{(x)}$:&lt;/span&gt;
    the circuit prepare the ground state of $H = \sigma^{(x)}$
    therefore the expectation value will be the ground state
    energy.
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;example-2-expectation-value-of-h--dfrac1sqrt2leftsigmaxsigmazright&quot;&gt;Example 2: expectation value of $H = \dfrac{1}{\sqrt{2}}\left(\sigma^{(x)}+\sigma^{(z)}\right)$&lt;/h4&gt;
&lt;p&gt;A quick calculation shows that $H$ has the following eigendecomposition:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $-1$ with eigenvector $\dfrac{1}{\sqrt{4+2\sqrt{2}}} \begin{bmatrix} 1-\sqrt{2} \\ 1\end{bmatrix}$&lt;/li&gt;
  &lt;li&gt;Eigenvalue $+1$ with eigenvector $\dfrac{1}{\sqrt{4+2\sqrt{2}}} \begin{bmatrix} 1+\sqrt{2} \\ 1\end{bmatrix}$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unlike the previous examples, it is not clear how to prepare the ground state by inspection.
So we can’t readily generate a circuit and compute the expectation value that
would result in the ground state energy.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert figure-info&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        The ground state is generally unkown
    &lt;/div&gt;
    If we knew the ground state, we would not need VQE because
    computing the ground state energy would simply amount to
    preparing the ground state and measuring the expectation
    value of the Hamiltonian with respect to the prepared
    state.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So we will prepare some generic state and measure the expectation value
with respect to that state. The result is not important, it is how
we achieve that result that’s important.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: PennyLane doesn’t exactly make it possible to iterate&lt;/em&gt;
&lt;em&gt;through the counts we get upon measurement so it is not easy&lt;/em&gt;
&lt;em&gt;for us to manually compute the expectation value according&lt;/em&gt;
&lt;em&gt;to equation $(\href{#mjx-eqn:3’}{3’})$.&lt;/em&gt;
&lt;em&gt;We will directly use their provided function for computing&lt;/em&gt;
&lt;em&gt;the expectation value and do a simple sanity check.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the code that follows, we compute the expectation value
according to equation $(\href{#mjx-eqn:4}{4})$ then ask PennyLane do the same
calculation for us and compare the result.&lt;/p&gt;

&lt;p&gt;The sanity check depends on the fact that PennyLane
already has our observable $H$ as the $Hadamard$ observable.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# We fix the seed to make results reproducible
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We request the exact expectation value by not setting shots
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;x_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;z_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hadamard_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;custom_expval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builtin_expval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hadamard_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builtin_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom_expval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builtin_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# should print True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Expectation value of $H = \dfrac{1}{\sqrt{2}}\left(\sigma^{(x)}+\sigma^{(z)}\right)$:
    &lt;/span&gt;
    we see a confirmation of equation $(\href{#mjx-eqn:4}{4})$ since both
    &lt;code&gt;custom_expval&lt;/code&gt; and &lt;code&gt;builtin_expval&lt;/code&gt;
    contain the same value.
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;example-3-expectation-value-of-h--sigmax-otimes-sigmaz--sigmai-otimes-sigmaz&quot;&gt;Example 3: expectation value of $H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(i)} \otimes \sigma^{(z)}$&lt;/h4&gt;
&lt;p&gt;It is easily and quickly verified that $H$ has the following eigendecomposition:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eigenvalue $-2$ has eigenvector $\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal$&lt;/li&gt;
  &lt;li&gt;Eigenvalue $0$ has two eigenvectors:
    &lt;ul&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; -1 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
      &lt;li&gt;$\dfrac{1}{\sqrt{2}} \begin{bmatrix} 0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 1\end{bmatrix}^\intercal$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Eigenvalue $2$ has eigenvector $\dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\end{bmatrix}^\intercal$&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, if we compute the expectation value with respect to the
state $\ket{\psi} = \dfrac{1}{\sqrt{2}} \left( \ket{01} + \ket{11} \right)$
we should get the eigenvalue $-2$.
The code below confirms that.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xz_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zi_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;h_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xz_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zi_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# should print -2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Expectation value of $H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(i)} \otimes \sigma^{(z)}$:
    &lt;/span&gt;
    since we prepared the ground state $\ket{\psi} = \ket{+}\ket{1}$
    the expectation value yields the ground state energy $-2$.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-variational-method&quot;&gt;The variational method&lt;/h3&gt;
&lt;p&gt;From basic quantum mechanics we know that every system has a lowest
energy, call it $\lambda_0$.
We are generally interested in finding that energy.&lt;/p&gt;

&lt;p&gt;The variational method allows to find an approximation of that energy.
The idea is very simple: since $\lambda_0 \le \lambda_i, \forall i$,
we have the following:&lt;/p&gt;

\[\begin{align}
    \braket{H} &amp;amp; = \sum_{i} \lambda_i \lvert\braket{\psi\\|\lambda_i}\rvert^{2} \\
    &amp;amp; \ge \sum_{i} \lambda_0 \lvert\braket{\psi\\|\lambda_i}\rvert^{2} \\
    &amp;amp; = \lambda_0 \sum_{i} \lvert\braket{\psi\\|\lambda_i}\rvert^{2} \\
    &amp;amp; = \lambda_0 \sum_{i} p(\lambda_i) \\
    &amp;amp; = \lambda_0
\end{align}\]

&lt;p&gt;Where $\sum_{i} p(\lambda_i) = 1$ because probabilities must sum
to $1$ for normalized states.&lt;/p&gt;

&lt;p&gt;It follows then that:&lt;/p&gt;

\[\braket{H} \ge \lambda_0 \tag{5}\]

&lt;p&gt;Equation $(\href{#mjx-eqn:4}{4})$ is the &lt;em&gt;essence&lt;/em&gt; of the variational method.
It tells us that we can always try to find some state
that approximates the ground state.
Our goal therefore is to keep constructing such some state and
measure until we can’t find a state with a lowest energy
because we can never find a state with lower energy
than the ground state energy.
Then we hope that the state found with lowest energy is
sufficiently close to the true ground state energy.&lt;/p&gt;

&lt;h3 id=&quot;the-variational-algorithm&quot;&gt;The variational algorithm&lt;/h3&gt;
&lt;p&gt;How then do we find the state $\ket{\psi}$ that approximates
the ground state $\ket{\lambda_0}$? The trick is to parametrize
$\ket{\psi}$ and then vary those parameters until a particular
sequence of parameters leads to a state that appromiximates
the ground state.&lt;/p&gt;

&lt;p&gt;In other words we consider a state $\ket{\psi(\vec{\theta})} = U(\vec{\theta})\ket{00\dots0}$
where $\vec{\theta} = [\theta_{n-1},\theta_{n-2}, \cdots, \theta_0]$
are the parameters that we will vary until we appromixate the ground
state. Whence the &lt;em&gt;variational&lt;/em&gt; aspect of the algorithm.&lt;/p&gt;

&lt;h4 id=&quot;problem-statement&quot;&gt;Problem statement&lt;/h4&gt;
&lt;p&gt;Let us formaly state the variational problem. This is quite easy:
find a sequence of parameters $\vec{\theta}$ such that
$\mathcal{C}(\vec{\theta}) =
\bra{\psi(\vec{\theta})}H\ket{\psi(\vec{\theta})} \approx \lambda_0$.
The function $\mathcal{C}(\vec{\theta})$ is usually called the
&lt;em&gt;cost function&lt;/em&gt; or the &lt;em&gt;objective function&lt;/em&gt; and our goal is to minimize it.&lt;/p&gt;

&lt;p&gt;Mathematically:&lt;/p&gt;

\[\underset{\vec{\theta}}{min} \: \mathcal{C}(\vec{\theta}) =
\underset{\vec{\theta}}{min} \:
\bra{\psi(\vec{\theta})}H\ket{\psi(\vec{\theta})} \ge \lambda_0\]

&lt;p&gt;That is our goal is to find parameters $\vec{\theta}$ that minimize
$\mathcal{C}(\vec{\theta})$.&lt;/p&gt;

&lt;h4 id=&quot;problem-solution&quot;&gt;Problem solution&lt;/h4&gt;
&lt;p&gt;In general we will start with some arbitrary instance
$\ket{\psi} = \ket{\psi(\vec{\theta})}$ where we fix $\vec{\theta}$
to some values (usually selected randomly).
Then we will use an &lt;em&gt;optimizer&lt;/em&gt; to find new parameters $\vec{\theta}^*$
such at $\mathcal{C}(\vec{\theta}^*) &amp;lt; \mathcal{C}(\vec{\theta})$.&lt;/p&gt;

&lt;p&gt;The process will repeat itself until
$\mathcal{C}(\vec{\theta}^*) \approx \lambda_0$ at which point
the optimizer stops and reports the result.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert figure-warning&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        The optimizer and local minima
    &lt;/div&gt;
    The description above is a generalization because sometimes
    the optimizer can get stuck in a local minimum of
    $\mathcal{C}(\vec{\theta})$ and won&apos;t find a value
    close to $\lambda_0$ but we won&apos;t worry about that.
    Our hope though is that we end up with a value close to $\lambda_0$.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Each state $\ket{\psi(\vec{\theta})}$ where $\vec{\theta}$ is fixed is called an &lt;em&gt;ansatz&lt;/em&gt;.
We will use circuits that have arbitrary rotations about some axis
to construct those ansätze. The circuits used to prepare arbitrary
ansätze are called &lt;em&gt;parametrized quantum circuits&lt;/em&gt; ($a.k.a.$ PQCs).
Without loss of generality, we will use PQC and ansatz interchangeably.&lt;/p&gt;

&lt;h4 id=&quot;the-algorithm&quot;&gt;The algorithm&lt;/h4&gt;
&lt;p&gt;While there will be slight variations in implementations,
the flow of VQE is quite the same across all implementations.
We present that flow as an algorithm:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;div class=&quot;algorithm&quot;&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Prepare:&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
$\quad cost(\vec{\theta}) = \bra{\psi(\vec{\theta})}H\ket{\psi(\vec{\theta})}$&lt;br /&gt;
$\quad optimizer = Optimizer()$&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Initialize:&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
$\quad maxiter &amp;gt; 0$&lt;br /&gt;
$\quad iter = 0$&lt;br /&gt;
$\quad \vec{\theta} = rand()$&lt;br /&gt;
$\quad energy = cost(\vec{\theta})$&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;while&lt;/strong&gt; $iter &amp;lt; maxiter$&lt;strong&gt;:&lt;/strong&gt;&lt;br /&gt;
$\qquad \vec{\theta}, energy \gets optimizer(cost, \vec{\theta})$&lt;br /&gt;
$\qquad iter \gets iter + 1$&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;return&lt;/strong&gt; $energy$&lt;/p&gt;
  &lt;/div&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        VQE algorithm:
    &lt;/span&gt;
    we prepare the cost function as a circuit that calculates
    the expectation value w.r.t. $\ket{\psi(\vec{\theta})}$, initialize
    the parameters $\vec{\theta}$ to some random values
    and let the optimizer take it from there for a maximum
    number of iterations after which we report the
    computed energy.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Let us work through a couple of examples where we try to find
their ground state energies. We have calculated those energies
before, now we use VQE to find the same.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ansatz design:&lt;/strong&gt;&lt;br /&gt;
For both examples, we rely on arbitrary state preparation circuits.
This means that starting from fiduciary states $\ket{0}$ and $\ket{00}$,
we create circuits that allow us to generate arbitrary single-qubit and
two-qubits states.&lt;br /&gt;
The PQC for single-qubit systems is derived in &lt;a href=&quot;#single-qubit-state-preparation&quot;&gt;single-qubit state preparation&lt;/a&gt;.&lt;br /&gt;
And a PQC for two-qubits systems is derived in &lt;a href=&quot;#two-qubits-state-preparation&quot;&gt;two-qubits state preparation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Optimizer selection:&lt;/strong&gt;&lt;br /&gt;
We chose the SPSA optimizer because it works out of the box
without requiring additional knowledge beyond what we have already learned
thus far. When we look at gradient descent, we will see we require
the ability to find the gradient of the cost function and we haven’t learned how.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-1-ground-state-energy-of-h--dfrac1sqrt2leftsigmaxsigmazright&quot;&gt;Example 1: ground state energy of $H = \dfrac{1}{\sqrt{2}}\left(\sigma^{(x)}+\sigma^{(z)}\right)$&lt;/h4&gt;
&lt;p&gt;We already know from &lt;a href=&quot;#example-2-expectation-value-of-h--dfrac1sqrt2leftsigmaxsigmazright&quot;&gt;calculating the expectation value of $H$&lt;/a&gt;
that it has ground state energy $-1$. We just couldn’t manually construct
the ground state itself.&lt;/p&gt;

&lt;p&gt;The code that follows implements VQE as per the algorithm above and it does
find the ground state energy. We plot the optimization steps in the figure
that follows the code so we can see the optimizer in action.&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane.numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hadamard_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhaseShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hadamard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vqe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPSAOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_and_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Print the optimizer progress every 10 steps
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,  Energy = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Save the full energy optimization history
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Initialize theta from the normal distribution with mean 0 and spread np.pi
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# The last argument is set to 2
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# because we need to pass 2 parameters to the cost function
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;init_theta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# We try 151 iterations
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;151&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Run VQE
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vqe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hadamard_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Print the final energy
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Plot the optimization history
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dashed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Energy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Optimization step&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Energy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Ground state energy of $H = \dfrac{1}{\sqrt{2}}\left(\sigma^{(x)}+\sigma^{(z)}\right)$:
    &lt;/span&gt;
    while we may not get exactly $-1$, we will get comfortably close to it.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can see how the optimizer gets closer to the ground state energy
even though the initial energy estimation is not too far away from the true
energy:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Step = 0,  Energy = -0.84014000
Step = 10,  Energy = -0.92522000
Step = 20,  Energy = -0.96302000
Step = 30,  Energy = -0.97982000
Step = 40,  Energy = -0.98670000
Step = 50,  Energy = -0.99214000
Step = 60,  Energy = -0.99522000
Step = 70,  Energy = -0.99638000
Step = 80,  Energy = -0.99744000
Step = 90,  Energy = -0.99860000
Step = 100,  Energy = -0.99874000
Step = 110,  Energy = -0.99902000
Step = 120,  Energy = -0.99922000
Step = 130,  Energy = -0.99936000
Step = 140,  Energy = -0.99960000
Step = 150,  Energy = -0.99970000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Optimization evolution every 10 steps:
    &lt;/span&gt;
    sometimes we will start close to the true ground state energy,
    other times not. But we clearly see the optimizer converging
    towards the true ground state energy.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The plot generated by the code above should help drive
home the point of how VQE works:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/h-vqe.png&quot; style=&quot;width: 80%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;VQE optimization landscape for
        $H = \dfrac{1}{\sqrt{2}}\left(\sigma^{(x)}+\sigma^{(z)}\right)$:&lt;/span&gt;
        we can clearly see the optimizer approaching the true ground state energy
        of our Hamiltonian $H$.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;example-2-ground-state-energy-of-h--sigmax-otimes-sigmaz--sigmai-otimes-sigmaz&quot;&gt;Example 2: ground state energy of $H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(i)} \otimes \sigma^{(z)}$&lt;/h4&gt;
&lt;p&gt;The procedure is pretty much the same as with the Hadamard
observable, except we will make use of equation $(\href{#mjx-eqn:4}{4})$
since we will calculate the ground state energies of
$\sigma^{(x)} \otimes \sigma^{(z)}$ and $\sigma^{(i)} \otimes \sigma^{(z)}$
separately.&lt;/p&gt;

&lt;p&gt;Without further ado, here is the code:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pennylane.numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default.qubit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ansatz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhaseShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControlledPhaseShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControlledPhaseShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xz_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ansatz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iz_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ansatz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PauliZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vqe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPSAOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step_and_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Print the optimizer progress every 40 steps
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Step = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,  Energy = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Save the full energy optimization history
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Initialize params from the normal distribution with mean 0 and variance np.pi
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;init_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# We try 401 iterations
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Run VQE
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Optimizer progress for the XZ observable:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xz_energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vqe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xz_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Optimizer progress for the IZ observable:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iz_energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vqe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iz_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Print the final energy
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xz_energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iz_energy&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Final energy:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Ground state energy of $H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(i)} \otimes \sigma^{(z)}$:
    &lt;/span&gt;
    we should expect to get an energy close to $-2$.
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And here is a sample run on my machine:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Optimizer progress for the XZ observable:
Step = 0,  Energy = 0.81258000
Step = 40,  Energy = 0.38758000
Step = 80,  Energy = 0.04470000
Step = 120,  Energy = -0.10830000
Step = 160,  Energy = -0.25992000
Step = 200,  Energy = -0.51630000
Step = 240,  Energy = -0.72498000
Step = 280,  Energy = -0.80484000
Step = 320,  Energy = -0.88252000
Step = 360,  Energy = -0.90248000
Step = 400,  Energy = -0.93032000

Optimizer progress for the IZ observable:
Step = 0,  Energy = -0.63556000
Step = 40,  Energy = -0.93758000
Step = 80,  Energy = -0.97082000
Step = 120,  Energy = -0.97892000
Step = 160,  Energy = -0.98604000
Step = 200,  Energy = -0.98908000
Step = 240,  Energy = -0.99122000
Step = 280,  Energy = -0.99288000
Step = 320,  Energy = -0.99420000
Step = 360,  Energy = -0.99448000
Step = 400,  Energy = -0.99518000

Final energy: -1.92782&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;div class=&quot;caption&quot;&gt;
    &lt;span class=&quot;caption-label&quot;&gt;
        Optimization evolution every 40 steps and final energy:
    &lt;/span&gt;
    while we didn&apos;t get exactly $-2$, we got pretty close to it.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;
&lt;p&gt;The reader who just wanted to get the basics and play a little
should free to stop here.&lt;/p&gt;

&lt;p&gt;Even if the reader just wanted to get the basics, they are encouraged
to read the final section on practical considerations
so they understand the limitations of VQE, especially
the &lt;em&gt;measurement problem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For the reader that wants to delve a
little deeper, the sections that follow elaborate on ways
ansätze are designed, what choices of optimizers we have,
and a few ways we have to reduce the number of measurements.&lt;/p&gt;

&lt;h2 id=&quot;ansatz-design&quot;&gt;Ansatz design&lt;/h2&gt;
&lt;p&gt;Designing an ansatz is certainly no easy task.
Building up on the work already done, ansätze can be classified
into fixed structure or adaptive structure ansätze, see &lt;a class=&quot;citation&quot; href=&quot;#Tilly_2022&quot;&gt;(Tilly et al., 2022)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The software engineer will generally experiment with various ansätze
for a specific problem via educated guessing.&lt;br /&gt;
And when appropriate build upon existing ansätze.&lt;/p&gt;

&lt;p&gt;Fixed structure ansätze are those where the circuit structure doesn’t change
between optimization phases. In adaptive strucutre ansätze, the circuit
structure changes as the circuit structure is adapted to the problem
being solved.&lt;/p&gt;

&lt;p&gt;Since this article is meant to serve as an introduction to VQE,
we won’t bother about adaptive structure ansätze;
we discuss only fixed structure ansätze.&lt;br /&gt;
Moreover, even in fixed structure ansätze, we will try
to restrict ourselves to ansätze that a software engineer can tackle.&lt;/p&gt;

&lt;p&gt;In fixed structure ansätze, &lt;em&gt;I&lt;/em&gt; do the following classification:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Physics inspired ansätze.&lt;/li&gt;
  &lt;li&gt;Hardware inspired ansätze.&lt;/li&gt;
  &lt;li&gt;Mathematics inspired ansätze.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;physics-inspired-ansätze&quot;&gt;Physics inspired ansätze&lt;/h3&gt;
&lt;p&gt;In physics inspired ansätze, we try to use information about the problem
and decide how best to tailor the ansatz such that we can efficiently
search the Hilbert space.&lt;/p&gt;

&lt;p&gt;There are two ansätze that have featured prominently with applications
in quantum chemistry and condensed matter physics.&lt;/p&gt;

&lt;p&gt;Since we are software engineers,
it is not worth our while to study these ansätze in detail,
it is sufficient to know they exist.&lt;/p&gt;

&lt;h4 id=&quot;unitary-coupled-cluster-ucc-ansatz&quot;&gt;Unitary coupled cluster (UCC) ansatz&lt;/h4&gt;
&lt;p&gt;This is the ansatz that was used in the original work on VQE &lt;a class=&quot;citation&quot; href=&quot;#Peruzzo_2014&quot;&gt;(Peruzzo et al., 2014)&lt;/a&gt;.
It comes from &lt;a href=&quot;https://en.wikipedia.org/wiki/Coupled_cluster&quot;&gt;coupled cluster theory&lt;/a&gt;
for studying many-body systems and has found many uses in &lt;em&gt;ab initio&lt;/em&gt; quantum
chemistry.&lt;/p&gt;

&lt;h4 id=&quot;hamiltonian-variational-ansatz-hva&quot;&gt;Hamiltonian variational ansatz (HVA)&lt;/h4&gt;
&lt;p&gt;The Hamiltonian variational ansatz builds upon the Hamiltonian
to be studied. The circuit is built by taking the exponential
of commuting terms in the Hamiltonian.
That procedure gives us unitaries that can be decomposed
into gates.&lt;/p&gt;

&lt;p&gt;The paper that proposed this ansatz, &lt;a class=&quot;citation&quot; href=&quot;#Wecker_2015&quot;&gt;(Wecker et al., 2015)&lt;/a&gt;
shows that the ansatz doesn’t perform very well in quantum chemistry
applications but does well on the Hubbard model, a condensed
matter physics problem.&lt;/p&gt;

&lt;p&gt;Since condensed matter physics is one of the fields
where we expect quantum computing to help, if faced
with a problem from condensed matter physics,
HVA is a good ansatz to try out.&lt;/p&gt;

&lt;h3 id=&quot;hardware-inspired-ansätze&quot;&gt;Hardware inspired ansätze&lt;/h3&gt;
&lt;p&gt;The basic idea of hardware inspired ansätze is that
we create a circuit that closely matches the structure
of the hardware, most importantly the native gateset,
and if possible the connectivity of the device.&lt;/p&gt;

&lt;p&gt;This type of ansätze came from &lt;a class=&quot;citation&quot; href=&quot;#Kandala_2017&quot;&gt;(Kandala et al., 2017)&lt;/a&gt;
and the original is called hardware-efficient ansatz (HEA).
There are many variants of it now but this one
is sufficient to get start.&lt;/p&gt;

&lt;h4 id=&quot;hardware-efficient-ansatz-hea&quot;&gt;Hardware-efficient ansatz (HEA)&lt;/h4&gt;
&lt;p&gt;The fundemental structure of the hardware-efficient ansatz
is to start with a layer of rotations gates acting individualy
on each qubit as in the figure that follows:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/hea-init-layer.png&quot; style=&quot;width: 40%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Possible rotation layer of HEA:&lt;/span&gt;
        we have chosen $RX$ and $RY$ as
        our rotation gates.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then we follow that initialization step with a layer of entangling gates.
Then an additional layer of rotations. Then entanglers, etc.
We will generally want the entangling layer to reflect the topology of the
device so we can avoid introducing additional $SWAP$ gates to account for
qubits that are not connected directly on the device.
This layer will look something like what follows in the figure below:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/hea-entangling-layer.png&quot; style=&quot;width: 20%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Possible entangling layer of HEA:&lt;/span&gt;
        we have chosen $CNOT$ gates as our entanglers.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The parametrized quantum circuit for HEA will have a general
structure as per the formula that follows:&lt;/p&gt;

\[\begin{align}
    \ket{\psi(\vec{\theta})} &amp;amp;= \prod_{q=1}^{N} \left[ U^{q,d-1}(\vec{\theta}) \right] \times U_{ENT} \\
    &amp;amp;\times \prod_{q=1}^{N} \left[ U^{q,d-2}(\vec{\theta}) \right] \times U_{ENT} \\
    &amp;amp;\times \cdots \times \\
    &amp;amp;\times \prod_{q=1}^{N} \left[ U^{q,0}(\vec{\theta}) \right] \ket{00\dots0}
\end{align}\]

&lt;p&gt;Where $q$ is the qubit index up to $N$ qubits and $d$ is number of layers
since we are allowed to repeat the various rotation and entangling layers.
$U^{q,l}(\vec{\theta})$ is the layer of rotations acting on $q$ qubits
in the $d^{th}$ layer. Note that if a layer in a layer has $M$ rotation gates
per qubits acting on $N$ qubits, we will need $M \times N$ parameters per layer.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to use HEA for the two-qubits example(s)
    we have encounted thus far and explore with changing the number
    of layers.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mathematics-inspired-ansätze&quot;&gt;Mathematics inspired ansätze&lt;/h3&gt;
&lt;p&gt;In this class of ansätze, we don’t look at the make of the hardware
nor do we take into consideration the structure of the problem.&lt;/p&gt;

&lt;p&gt;The premise is this: how do we prepare arbitrary quantum states?
There are two ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;State preparation: start from a know state and ask what circuit
 would allow us to explore the Hilbert space starting from that state.&lt;/li&gt;
  &lt;li&gt;Gate synthesis: given an arbitrary starting state, what circuit
 would allow us to explore the entire Hilbert space?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have already encountered ansätze based on state preparation
so there should be no suprise there.
The gate synthesis problem on the other hand is based
on create a unitary that prepares an arbitrary quantum state
then decomposing that unitary into a given gateset
(that of the device we will run on).&lt;/p&gt;

&lt;p&gt;Both approaches fall into the area of quantum compiling
and this subsection cannot do it justice.
We will therefore only broach the subject and point
the reader to a couple of resources.&lt;/p&gt;

&lt;h4 id=&quot;state-preparation-ansatz&quot;&gt;State preparation ansatz&lt;/h4&gt;
&lt;p&gt;We learned how to prepare states starting from $\ket{00\dots0}$
in the previous sections and derived circuits for one and two qubits
circuits.&lt;/p&gt;

&lt;p&gt;But we also learned that the circuits derived are inefficient with
regard to the number of $CNOT$ gates. This is important because
$CNOT$ gates are known to be very noisy so they reduce
the quality of our ansatz.&lt;/p&gt;

&lt;p&gt;For two qubits, for instance, it is known that we would not
need more than a single $CNOT$ gate using the Schmidt decomposition.&lt;/p&gt;

&lt;p&gt;The method can be generalized to multiple qubits and is elaborate
upon in &lt;a class=&quot;citation&quot; href=&quot;#Murta_2023&quot;&gt;(Murta et al., 2023)&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to read section VII of the paper
    &lt;a class=&quot;citation&quot; href=&quot;#Murta_2023&quot;&gt;(Murta et al., 2023)&lt;/a&gt; and implement the procedure elaborate
    upon therein.
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;gate-synthesis-ansatz&quot;&gt;Gate synthesis ansatz&lt;/h4&gt;
&lt;p&gt;In the gate synthesis ansatz, we build a circuit
that is capable of preparing any quantum state
irrespective of the starting state.&lt;/p&gt;

&lt;p&gt;This may not be as efficient as the Schmidt decomposition
but it is still a valid procedure to build ourselves
ansätze. For instance, the gate synthesis for two qubits
will produce a circuit with 3 $CNOT$ gates.&lt;/p&gt;

&lt;p&gt;A circuit for two qubits gate synthesis
is presented in &lt;a class=&quot;citation&quot; href=&quot;#Shende_2004&quot;&gt;(Shende et al., 2004)&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to implement a generic circuit
    for single and two qubits gate synthesis and compare
    the results and optimizations with other types of ansätze
    already studied, mainly HEA and state preparation based
    ansätze.
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;optimizer-selection&quot;&gt;Optimizer selection&lt;/h2&gt;
&lt;p&gt;Optimizers are generally classified into two groups:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Gradient-based optimizers: these require computing or
 approximating the gradient of the objective function.&lt;/li&gt;
  &lt;li&gt;Gradient-free optimizers: no need to compute or
 approximate the gradient of the objective function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The choice of an optimizer will generally depend on
how fast it converges to the solution, how many measurements
it needs, and the quality of the solution obtained.&lt;/p&gt;

&lt;p&gt;If exploring optimizers is not your goal, SPSA is good
starting point &lt;a class=&quot;citation&quot; href=&quot;#Bonet_Monroig_2023&quot;&gt;(Bonet-Monroig et al., 2023)&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gradient-based-methods&quot;&gt;Gradient-based methods&lt;/h3&gt;
&lt;p&gt;Gradient-based methods require computing the gradient
directly or approximating it in some form.&lt;/p&gt;

&lt;p&gt;For optimization by direct gradient computation,
we discuss gradient-descent. For optimization
for gradient approximation, we discuss SPSA.&lt;/p&gt;

&lt;h4 id=&quot;gradient-descent&quot;&gt;Gradient-descent&lt;/h4&gt;
&lt;p&gt;The idea of gradient-descent is very simple:
given a cost function, we calculate its gradient
then use the it to find the new set of parameters.
The update rule is given by the following equation:&lt;/p&gt;

\[\begin{align}
    \vec{\theta_{k+1}} = \vec{\theta_k} - \eta \nabla C(\vec{\theta_k})
\end{align}\]

&lt;p&gt;Where $\eta$ is the learning rate or step size.
It tells us how big a step to take towards finding the minimum.&lt;/p&gt;

&lt;p&gt;At step $n = 0$, we might start with random parameters,
calculate the gradient with respect to those parameters
then compute the next set of parameters $n = 1$.&lt;/p&gt;

&lt;p&gt;The reader might wander how exactly the gradient of
the expectation value is calculated; that is finding:&lt;/p&gt;

\[\begin{align}
    \nabla C(\vec{\theta_k}) = \nabla(\bra{\psi(\vec{\theta})} H \ket{\psi(\vec{\theta})})
    = \bra{0\dots00} \nabla U^{\dagger}(\vec{\theta}) H \nabla U(\vec{\theta}) \ket{00\dots0}
\end{align}\]

&lt;p&gt;This problem is solved using a method called parameter-shift rule,
introduced in &lt;a class=&quot;citation&quot; href=&quot;#Mitarai_2018&quot;&gt;(Mitarai et al., 2018)&lt;/a&gt;.
We won’t elaborate on the details, the interested reader
can get a quick introduction from &lt;a href=&quot;https://pennylane.ai/qml/glossary/parameter_shift&quot;&gt;PennyLane&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gradient-descent has many variants, so it is really
interesting to play with them using different Hamiltonians
and different PQCs.
The book &lt;em&gt;Algorithms for Optimization&lt;/em&gt; &lt;a class=&quot;citation&quot; href=&quot;#10.5555/3351864&quot;&gt;(Kochenderfer &amp;amp; Wheeler, 2019)&lt;/a&gt; has a plethora of such
algorithms for the interested reader to play with.&lt;/p&gt;

&lt;h4 id=&quot;simultaneous-perturbation-stochastic-approximation-spsa&quot;&gt;Simultaneous perturbation stochastic approximation (SPSA)&lt;/h4&gt;
&lt;p&gt;The idea with SPSA is to replace direct gradient evaluation
with gradient approximation, that is replacing
$\nabla C(\vec{\theta_k})$ with an estimator $g_{k}(\vec{\theta_k})$.
The new update rule is given by:&lt;/p&gt;

\[\begin{align}
    \vec{\theta_{k+1}} = \vec{\theta_k} - a_k g_{k}(\vec{\theta_k})
\end{align}\]

&lt;p&gt;Where $a_k$ is a positive number and $g_{k}(\vec{\theta_k})$
is obviously the gradient estimator.&lt;/p&gt;

&lt;p&gt;The estimator $g_{k}(\vec{\theta_k})$, being a vector, will have its
$i^{th}$ component computed as follows:&lt;/p&gt;

\[\begin{align}
    (g_{k}(\vec{\theta_k}))_i = \frac{C(\theta_k + c_k \Delta_k) - C(\theta_k - c_k \Delta_k)}{2c_k(\Delta_{k})_i}
\end{align}\]

&lt;p&gt;Where $c_k$ is a user-supplied positive number and
$\Delta_k = \begin{bmatrix} \Delta_{k_1} &amp;amp; \Delta_{k_2} &amp;amp; \cdots &amp;amp; \Delta_{k_p} \end{bmatrix}^\intercal$
is a random perturbation vector with $p$ entries corresponding to the
number of parameters in the PQC.&lt;/p&gt;

&lt;p&gt;The advantage of SPSA over gradient descent is that it evaluates the objective
function only twice compared to GD that evaluates it $p$ times.&lt;/p&gt;

&lt;div class=&quot;figure figure-alert&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        Exercise
    &lt;/div&gt;
    The reader is encouraged to run GD and SPSA on some problems
    and compare their convergence rates.
    The PennyLane tutorial on
    &lt;a href=&quot;https://pennylane.ai/qml/demos/tutorial_spsa&quot;&gt;SPSA&lt;/a&gt;
    is a good starting point.
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gradient-free-methods&quot;&gt;Gradient-free methods&lt;/h3&gt;
&lt;p&gt;In gradient-free methods, not only we do not compute
the gradient directly, we don’t even try to approximate it.&lt;/p&gt;

&lt;p&gt;There are many such algorithms such as Nelder-Mead, Powell,
Quantum analytic descent, etc.&lt;/p&gt;

&lt;p&gt;While interesting in their own, I won’t try to even offer
much description of them but the reader is encouraged
to also experiment with them if they are so inclined.&lt;/p&gt;

&lt;h2 id=&quot;measurement-reduction&quot;&gt;Measurement reduction&lt;/h2&gt;
&lt;p&gt;Quantum computers are a precious resource so we would like
to make as few measurements as possible so we can solve
a greater number of problems.&lt;/p&gt;

&lt;p&gt;Let us recall that a Hamiltonian will be a linear combination
of Pauli terms (tensored Pauli matrices): $H = \sum_i h_i H_i$.&lt;/p&gt;

&lt;p&gt;There are two easy ways we can see in trying to reduce
the number of measurements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Measure commuting observables together.&lt;/li&gt;
  &lt;li&gt;Allocate more shots to Pauli terms with higher coefficients.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some other strategies that have been proposed
but those two above are quite easy to understand so we will describe them.&lt;/p&gt;

&lt;h3 id=&quot;grouping-qubit-wise-commutative-pauli-terms&quot;&gt;Grouping qubit-wise commutative Pauli terms&lt;/h3&gt;
&lt;p&gt;It is know that observables that do not commute cannot be
measured simultaneously due to the Heisenberg uncertainty
principle.&lt;/p&gt;

&lt;p&gt;Conversely, if two observables commute they can be measured
simultaneously.&lt;/p&gt;

&lt;p&gt;Qubit-wise commutativity simply means that in a Pauli term
if each Pauli matrix acting on qubit $i$ commutes with a
Pauli matrix in another Pauli term then those two
Pauli terms commute with each other.&lt;br /&gt;
This will be the case when the Pauli matrix in both terms
is either itself or the identity.&lt;/p&gt;

&lt;p&gt;For instance, in our two-qubits Hamiltonian
$H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(i)} \otimes \sigma^{(z)}$
both terms $H_1 = \sigma^{(x)} \otimes \sigma^{(z)}$ and
$H_2 = \sigma^{(i)} \otimes \sigma^{(z)}$ commute qubit-wise
because $\sigma^{(x)}$ commutes with $\sigma^{(i)}$
and $\sigma^{(z)}$ commutes with itself.
That means that both terms of $H$ can be measured simultaneously.&lt;/p&gt;

&lt;p&gt;If instead we had $H = \sigma^{(x)} \otimes \sigma^{(z)} + \sigma^{(z)} \otimes \sigma^{(z)}$
then we couldn’t measure both Pauli terms simultaneously
because they are not qubit-wise commuting.&lt;/p&gt;

&lt;p&gt;The essence of grouping is to find Pauli terms in a Hamiltonian
that commute and measure them together therefore
reducing the number of measurements needed to calculate
the expectation value of the entire Hamiltonian.&lt;/p&gt;

&lt;h3 id=&quot;weight-distribution-of-measurements&quot;&gt;Weight distribution of measurements&lt;/h3&gt;
&lt;p&gt;We recall that the expectation value of $H = \sum_i h_i H_i$
is given by $\braket{H} = \sum_i h_i \braket{H_i}$.
It follows that terms with higher coefficients will
contribute more to the final expectation value than those with
lower coefficients.&lt;/p&gt;

&lt;p&gt;So the basic idea is to weight each Pauli term according
to its coefficient then distribute shots according to
the weight of each Pauli term.&lt;/p&gt;

&lt;p&gt;In some cases, if some terms have very little weights,
they might be dropped entirely without affecting much the final
result.&lt;/p&gt;

&lt;h2 id=&quot;practical-considerations&quot;&gt;Practical considerations&lt;/h2&gt;
&lt;p&gt;There are a couple of challenges to consider when dealing with VQE:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The number of measurements.&lt;/li&gt;
  &lt;li&gt;Barren plateaus during training.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-measurement-problem&quot;&gt;The measurement problem&lt;/h3&gt;
&lt;p&gt;Compared to training neural networks, VQE sometimes
require that we keep the optimization loop going
until we have enough samples to calculate the expectation
value up to a required precision.&lt;/p&gt;

&lt;p&gt;This has proven challenging because it requires a huge
number of measurements to achieve the need precision.
&lt;a class=&quot;citation&quot; href=&quot;#Gonthier_2022&quot;&gt;(Gonthier et al., 2022)&lt;/a&gt; show that for quantum chemistry
applications on relatively simple molecules, a single
energy evaluation takes days!&lt;/p&gt;

&lt;p&gt;This is a major limitation of VQE that’s a subject
of current research.&lt;/p&gt;

&lt;h3 id=&quot;barren-plateaus-problem&quot;&gt;Barren plateaus problem&lt;/h3&gt;
&lt;p&gt;In order to do optimization, we saw that using gradient-based
optimization, we need to evaluate the gradient of the
cost function.&lt;/p&gt;

&lt;p&gt;What &lt;a class=&quot;citation&quot; href=&quot;#McClean_2018&quot;&gt;(McClean et al., 2018)&lt;/a&gt; showed was that for a large class
of parametrized quantum circuits the gradient will become
zero during optimization and thus the optimization will not progress.&lt;/p&gt;

&lt;p&gt;This is the trainability problem of VQE.
What’s worse, the more expressive a PQC
(meaning the more it can explore the Hilbert space),
the more prone it is to the barren plateau problem.&lt;/p&gt;

&lt;p&gt;So it is important to look for PQCs that are robust
against barren plateaus.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We introduced the variational quantum eigensolver(VQE)
by doing thorough derivations of the basic components of
how it works and wrote code that validate the algorithm.&lt;/p&gt;

&lt;p&gt;The interested reader is given pointers in refining the
different components of the algorithm so they can tackle
more advanced applications.&lt;/p&gt;

&lt;p&gt;We finally touched upon some practical considerations
that highlight the limitations of VQE and where research
is headed so as to make VQE of practical use.&lt;/p&gt;

&lt;h2 id=&quot;derivations&quot;&gt;Derivations&lt;/h2&gt;
&lt;p&gt;Some derivations were not necessary to follow the main material
but nonetheless are useful to know for completeness sake.
This section contains those derivations for interested readers.&lt;/p&gt;

&lt;h3 id=&quot;eigenvalues-and-eigenvectors-of-sigmaz&quot;&gt;Eigenvalues and eigenvectors of $\sigma^{(z)}$&lt;/h3&gt;
&lt;h4 id=&quot;eigenvalues&quot;&gt;Eigenvalues&lt;/h4&gt;

\[\begin{align}
    \det\begin{vmatrix} \sigma^{(z)} - \lambda \sigma^{(i)} \end{vmatrix} &amp;amp;= 0 \\
    \implies
    \det\begin{vmatrix}
        \begin{bmatrix}
        1-\lambda &amp;amp; 0 \\
        0 &amp;amp; -1-\lambda
        \end{bmatrix}
    \end{vmatrix} &amp;amp;= 0 \\
    \implies (1-\lambda)(-1-\lambda) &amp;amp;= 0 \\
    \implies \lambda &amp;amp;= \pm 1
\end{align}\]

&lt;p&gt;The eigenvalues of $\sigma^{(z)}$ are $\lambda_0 = +1$ and $\lambda_1 = -1$.&lt;/p&gt;

&lt;h4 id=&quot;eigenvectors&quot;&gt;Eigenvectors&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_0 = +1$&lt;/em&gt;&lt;/p&gt;

\[\begin{align}
      \sigma^{(z)} \ket{\lambda_+} &amp;amp;= +1 \ket{\lambda_+} \\
      \implies
      \begin{bmatrix}
      1 &amp;amp; 0 \\
      0 &amp;amp; -1
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      c_0 \\
      -c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      c_0 &amp;amp;= c_0 \\
      -c_1 &amp;amp;= c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;In the last step, $c_0 = c_0$ tells us nothing useful.
  But $-c_1 = c_1$ tells us that $c_1 = 0$. It follows then that
  $\ket{\lambda_+} = \begin{bmatrix} c_0 \\ 0 \end{bmatrix}$.&lt;/p&gt;

    &lt;p&gt;Using the normalization condition,
  we find that $\braket{\lambda_+|\lambda_+}=1$ implies $|c_0|^2=1$ therefore
  $c_0 = 1$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_+} = \begin{bmatrix} 1 \\ 0 \end{bmatrix}$.
  This eigenvector is also written as $\ket{0} = \ket{\lambda_+}$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_1 = -1$&lt;/em&gt;&lt;br /&gt;
  Repeating the same calculations as above:&lt;/p&gt;

\[\begin{align}
      \sigma^{(z)} \ket{\lambda_-} &amp;amp;= -1 \ket{\lambda_-} \\
      \implies
      \begin{bmatrix}
      1 &amp;amp; 0 \\
      0 &amp;amp; -1
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      c_0 \\
      -c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      c_0 &amp;amp;= -c_0 \\
      c_1 &amp;amp;= c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;Following the same reasoning that we used to calculate $\ket{\lambda_+}$,
  we find that $c_0 = 0$ and $c_1=1$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_-} = \begin{bmatrix} 0 \\ 1 \end{bmatrix}$.
  This eigenvector is also written as $\ket{1} = \ket{\lambda_-}$.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;eigenvalues-and-eigenvectors-of-sigmay&quot;&gt;Eigenvalues and eigenvectors of $\sigma^{(y)}$&lt;/h3&gt;
&lt;h4 id=&quot;eigenvalues-1&quot;&gt;Eigenvalues&lt;/h4&gt;

\[\begin{align}
    \det\begin{vmatrix} \sigma^{(y)} - \lambda \sigma^{(i)} \end{vmatrix} &amp;amp;= 0 \\
    \implies
    \det\begin{vmatrix}
        \begin{bmatrix}
        -\lambda &amp;amp; -i \\
        i &amp;amp; -\lambda
        \end{bmatrix}
    \end{vmatrix} &amp;amp;= 0 \\
    \implies \lambda^{2}-1 &amp;amp;= 0 \\
    \implies \lambda &amp;amp;= \pm 1
\end{align}\]

&lt;p&gt;The eigenvalues of $\sigma^{(y)}$ are $\lambda_+ = +1$ and $\lambda_- = -1$.&lt;/p&gt;

&lt;h4 id=&quot;eigenvectors-1&quot;&gt;Eigenvectors&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_+ = +1$&lt;/em&gt;&lt;/p&gt;

\[\begin{align}
      \sigma^{(y)} \ket{\lambda_+} &amp;amp;= +1 \ket{\lambda_+} \\
      \implies
      \begin{bmatrix}
      0 &amp;amp; -i \\
      i &amp;amp; 0
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      -i c_1 \\
      i c_0
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      -i c_1 &amp;amp;= c_0 \\
      i c_0 &amp;amp;= c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;Using $c_1 = i c_0$, we transform $\ket{\lambda_+}$ as follows:
  $\ket{\lambda_+} = \begin{bmatrix}c_0 \\ i c_0\end{bmatrix}$&lt;/p&gt;

    &lt;p&gt;Using the normalization condition,
  we find that $\braket{\lambda_+|\lambda_+}=1$ implies $2|c_0|^2=1$
  from which it follows that $c_0 = \dfrac{1}{\sqrt{2}}$.
  Consequently $c_1 = \dfrac{i}{\sqrt{2}}$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_+} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ i \end{bmatrix}$.
  This eigenvector is also written as $\ket{+i} = \ket{\lambda_+}$.
  Expressed in the $\sigma^{(z)}$ basis, $\ket{+i} = \dfrac{1}{\sqrt{2}}(\ket{0} + i\ket{1})$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_- = -1$&lt;/em&gt;&lt;/p&gt;

\[\begin{align}
      \sigma^{(y)} \ket{\lambda_-} &amp;amp;= -1 \ket{\lambda_-} \\
      \implies
      \begin{bmatrix}
      0 &amp;amp; -i \\
      i &amp;amp; 0
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      -i c_1 \\
      i c_0
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      i c_1 &amp;amp;= c_0 \\
      i c_0 &amp;amp;= -c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;Using $c_0 = i c_1$, we transform $\ket{\lambda_-}$ as follows:
  $\ket{\lambda_-} = \begin{bmatrix}ic_1 \\ c_1\end{bmatrix}$&lt;/p&gt;

    &lt;p&gt;Using the normalization condition,
  we find that $\braket{\lambda_-|\lambda_-}=1$ implies $2|c_1|^2=1$
  from which it follows that $c_1 = \dfrac{1}{\sqrt{2}}$.
  Consequently $c_1 = -\dfrac{i}{\sqrt{2}}$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_-} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ -i \end{bmatrix}$.
  This eigenvector is also written as $\ket{-i} = \ket{\lambda_-}$.
  Expressed in the $\sigma^{(z)}$ basis, $\ket{-i} = \dfrac{1}{\sqrt{2}}(\ket{0} - i\ket{1})$.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;eigenvalues-and-eigenvectors-of-sigmax&quot;&gt;Eigenvalues and eigenvectors of $\sigma^{(x)}$&lt;/h3&gt;
&lt;h4 id=&quot;eigenvalues-2&quot;&gt;Eigenvalues&lt;/h4&gt;

\[\begin{align}
    \det\begin{vmatrix} \sigma^{(x)} - \lambda \sigma^{(i)} \end{vmatrix} &amp;amp;= 0 \\
    \implies
    \det\begin{vmatrix}
        \begin{bmatrix}
        -\lambda &amp;amp; 1 \\
        1 &amp;amp; -\lambda
        \end{bmatrix}
    \end{vmatrix} &amp;amp;= 0 \\
    \implies \lambda^{2}-1 &amp;amp;= 0 \\
    \implies \lambda &amp;amp;= \pm 1
\end{align}\]

&lt;p&gt;The eigenvalues of $\sigma^{(x)}$ are $\lambda_+ = +1$ and $\lambda_- = -1$.&lt;/p&gt;

&lt;h4 id=&quot;eigenvectors-2&quot;&gt;Eigenvectors&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_+ = +1$&lt;/em&gt;&lt;/p&gt;

\[\begin{align}
      \sigma^{(x)} \ket{\lambda_+} &amp;amp;= +1 \ket{\lambda_+} \\
      \implies
      \begin{bmatrix}
      0 &amp;amp; 1 \\
      1 &amp;amp; 0
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      c_1 \\
      c_0
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      c_1 &amp;amp;= c_0 \\
      c_0 &amp;amp;= c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;Using $c_1 = c_0$, we transform $\ket{\lambda_+}$ as follows:
  $\ket{\lambda_+} = \begin{bmatrix}c_0 \\ c_0\end{bmatrix}$&lt;/p&gt;

    &lt;p&gt;Using the normalization condition,
  we find that $\braket{\lambda_+|\lambda_+}=1$ implies $2|c_0|^2=1$
  from which it follows that $c_0 = \dfrac{1}{\sqrt{2}}$.
  Consequently $c_1 = \dfrac{1}{\sqrt{2}}$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_+} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ 1 \end{bmatrix}$.
  This eigenvector is also written as $\ket{+} = \ket{\lambda_+}$.
  Expressed in the $\sigma^{(z)}$ basis, $\ket{+} = \dfrac{1}{\sqrt{2}}(\ket{0} + \ket{1})$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Eigenvector corresponding to eigenvalue $\lambda_- = -1$&lt;/em&gt;&lt;/p&gt;

\[\begin{align}
      \sigma^{(x)} \ket{\lambda_-} &amp;amp;= -1 \ket{\lambda_-} \\
      \implies
      \begin{bmatrix}
      0 &amp;amp; 1 \\
      1 &amp;amp; 0
      \end{bmatrix}
      \begin{bmatrix}
      c_0 \\
      c_1
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{bmatrix}
      c_1 \\
      c_0
      \end{bmatrix}
      &amp;amp;=
      \begin{bmatrix}
      -c_0 \\
      -c_1
      \end{bmatrix} \\
      \implies
      \begin{cases}
      c_1 &amp;amp;= -c_0 \\
      c_0 &amp;amp;= -c_1
      \end{cases}
  \end{align}\]

    &lt;p&gt;Using $c_0 = -c_1$, we transform $\ket{\lambda_-}$ as follows:
  $\ket{\lambda_-} = \begin{bmatrix}c_0 \\ -c_0\end{bmatrix}$&lt;/p&gt;

    &lt;p&gt;Using the normalization condition,
  we find that $\braket{\lambda_-|\lambda_-}=1$ implies $2|c_0|^2=1$
  from which it follows that $c_0 = \dfrac{1}{\sqrt{2}}$.
  Consequently $c_1 = -\dfrac{1}{\sqrt{2}}$.&lt;/p&gt;

    &lt;p&gt;Thus $\ket{\lambda_-} = \dfrac{1}{\sqrt{2}} \begin{bmatrix} 1 \\ -1\end{bmatrix}$.
  This eigenvector is also written as $\ket{-} = \ket{\lambda_-}$.
  Expressed in the $\sigma^{(z)}$ basis, $\ket{-} = \dfrac{1}{\sqrt{2}}(\ket{0} - \ket{1})$.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parametrized-quantum-circuits-via-state-preparation&quot;&gt;Parametrized quantum circuits via state preparation&lt;/h3&gt;
&lt;p&gt;We can use state preparation circuits as a starting point
for the design of parametrized quantum circuits.&lt;/p&gt;

&lt;p&gt;We do derivations for single-qubit and two-qubits states
though the procedure can be extented to multiple qubits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: except for the single-qubit case, any circuit&lt;/em&gt;
&lt;em&gt;of more than one qubit obtained by the procedure below&lt;/em&gt;
&lt;em&gt;will be inefficient depth-wise and CNOT count wise.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;single-qubit-state-preparation&quot;&gt;Single-qubit state preparation&lt;/h4&gt;
&lt;p&gt;A single qubit has the trigonometric parametrization:&lt;/p&gt;

\[\begin{align}
\ket{\psi} = \cos\dfrac{\theta}{2} \ket{0} + {\rm e}^{i\phi} \sin\dfrac{\theta}{2} \ket{1}
\end{align}\]

&lt;p&gt;Our task then is to design a circuit that would prepare such a state
starting from the state $\ket{0}$.&lt;/p&gt;

&lt;p&gt;We begin by noting that
$RY(\theta)\ket{0} = \cos\dfrac{\theta}{2} \ket{0} + \sin\dfrac{\theta}{2} \ket{1}$.
We also know that application of the phase shift gate confers
a phase to a qubit in the $\ket{1}$ state but does nothing to the $\ket{0}$ state.&lt;/p&gt;

&lt;p&gt;So it follows that
$P(\phi)RY(\theta)\ket{0} = \cos\dfrac{\theta}{2} \ket{0} + {\rm e}^{i\phi} \sin\dfrac{\theta}{2} \ket{1}$.&lt;/p&gt;

&lt;p&gt;And thus we have our circuit:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/single-qubit-state-preparation.png&quot; style=&quot;width: 35%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Preparation of an arbitrary single qubit state:&lt;/span&gt;
        we apply a rotation about Y then a phase shift gate.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;two-qubits-state-preparation&quot;&gt;Two-qubits state preparation&lt;/h4&gt;
&lt;p&gt;A two-qubits state has the trigonometric parametrization:&lt;/p&gt;

\[\begin{align}
\ket{\psi}  &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} \\
            &amp;amp;+ {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \cos\dfrac{\theta_2}{2} \ket{01} \\
            &amp;amp;+ {\rm e}^{i\phi_2} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \cos\dfrac{\theta_3}{2}  \ket{10} \\
            &amp;amp;+ {\rm e}^{i\phi_3} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \sin\dfrac{\theta_3}{2}  \ket{11} \\
\end{align}\]

&lt;p&gt;We design the circuit by following the exact same steps as for the single qubit case,
starting from the $\ket{00}$ state.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Apply $RY(\theta_1)$ to qubit $1$:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_1} &amp;amp;= RY_{1}(\theta_1) \ket{00} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} + \sin\dfrac{\theta_1}{2} \ket{01}
 \end{align}\]
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply $P(\phi_1)$ to qubit $1$:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_2} &amp;amp;= P_{1}(\phi_1) \ket{\psi_1} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} + {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \ket{01}
 \end{align}\]
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply controlled-$RY(\phi_{2})$ to qubit $0$ if qubit $1$ is set:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_3} &amp;amp;= CRY^{(1)}_{1\to 0}(\theta_2) \ket{\psi_2} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} \\
             &amp;amp;+ {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \cos\dfrac{\theta_2}{2} \ket{01} \\
             &amp;amp;+ \underbrace{ {\rm e}^{i\phi_1} }_{\text{wrong phase}} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \ket{11}
 \end{align}\]

    &lt;p&gt;Comparing with the original state $\ket{\psi}$ we are trying to construct,
 it clear that the term ${\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \ket{11}$
 in $\ket{\psi_3}$ has the wrong phase; it should be ${\rm e}^{i\phi_3}$ and not ${\rm e}^{i\phi_1}$.
 We do the correction in the next step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply controlled-$P(\phi_3-\phi_1)$ to qubit $1$ if qubit $0$ is set:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_4} &amp;amp;= CP^{(1)}_{0\to 1}(\phi_3 - \phi_1) \ket{\psi_3} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} \\
             &amp;amp;+ {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \cos\dfrac{\theta_2}{2} \ket{01} \\
             &amp;amp;+ {\rm e}^{i\phi_3} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \ket{11}
 \end{align}\]
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply controlled-$RY(\theta_3)$ to qubit $1$ if qubit $0$ is set:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_5} &amp;amp;= CRY^{(1)}_{0\to 1}(\theta_3) \ket{\psi_4} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} \\
             &amp;amp;+ {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \cos\dfrac{\theta_2}{2} \ket{01} \\
             &amp;amp;+ \underbrace{ {\rm e}^{i\phi_3} }_{\text{wrong phase}} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \cos\dfrac{\theta_3}{2} \ket{10} \\
             &amp;amp;+ {\rm e}^{i\phi_3} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \sin\dfrac{\theta_3}{2} \ket{11} \\
 \end{align}\]

    &lt;p&gt;Again, we see that there is a term with the wrong phase,
 ${\rm e}^{i\phi_3} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \cos\dfrac{\theta_3}{2} \ket{10}$.
 It should be ${\rm e}^{i\phi_2}$ and not ${\rm e}^{i\phi_3}$. We correct the phase in the next step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply controlled-$P(\phi_2 - \phi_3)$ to qubit $0$ if qubit $1$ is &lt;strong&gt;not&lt;/strong&gt; set:&lt;/p&gt;

\[\begin{align}
 \ket{\psi_6} &amp;amp;= CP^{(0)}_{0\to 1}(\phi_2 - \phi_2) \ket{\psi_5} \\
             &amp;amp;= \cos\dfrac{\theta_1}{2} \ket{00} \\
             &amp;amp;+ {\rm e}^{i\phi_1} \sin\dfrac{\theta_1}{2} \cos\dfrac{\theta_2}{2} \ket{01} \\
             &amp;amp;+ {\rm e}^{i\phi_2} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \cos\dfrac{\theta_3}{2} \ket{10} \\
             &amp;amp;+ {\rm e}^{i\phi_3} \sin\dfrac{\theta_1}{2} \sin\dfrac{\theta_2}{2} \sin\dfrac{\theta_3}{2} \ket{11}
 \end{align}\]

    &lt;p&gt;Notice that the term $\cos\dfrac{\theta_1}{2} \ket{00}$ doesn’t acquire any phase.
 This is because, remember, the target qubit is in the $\ket{0}$ state.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we have recovered the original state $\ket{\psi}$.
The circuit corresponding to the gates sequences is presented below:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/two-qubits-state-preparation.png&quot; style=&quot;width: 100%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Preparation of an arbitrary two-qubits state:&lt;/span&gt;
        we notice that we have 4 controlled operations which will be quite expensive.
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The last negated control (change target if control &lt;strong&gt;is not&lt;/strong&gt; set)
can be replaced by a positive control (change target if control &lt;strong&gt;is&lt;/strong&gt; set)
by sandwiching the control between two $X$ gates. This replacement yields
the following circuit:&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
    &lt;img src=&quot;/assets/images/vqe/two-qubits-state-preparation-final.png&quot; style=&quot;width: 100%; height: auto; display: block; margin: 0 auto&quot; /&gt;
    &lt;div class=&quot;caption&quot;&gt;
        &lt;span class=&quot;caption-label&quot;&gt;Preparation of an arbitrary two-qubits state:&lt;/span&gt;
        we change the negative control to a positive control so the circuit is easy
        to work with in PennyLane.
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;figure figure-alert figure-warning&quot; style=&quot;margin-top: 10px&quot;&gt;
&lt;div class=&quot;caption&quot;&gt;
    &lt;div class=&quot;caption-label&quot;&gt;
        The derived parametrized quantum circuit is inefficient
    &lt;/div&gt;
    Notice that we require 4 controlled rotations that will amount
    to 8 controlled CNOTs and 8 single-qubit rotations.
    &lt;b&gt;This is wildly inefficient.&lt;/b&gt;&lt;br /&gt;
    This derivation is shown for completeness sake,
    there are better PQCs!
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction The variational quantum eigensolver (VQE) is a hybrid quantum-classical algorithm that performs the hard computation on a quantum computer then uses a classical computer to process the measurement results from the quantum computer.</summary></entry></feed>